# -*- coding: utf-8 -*-
"""Final Plant-Disease-Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-DhAUPeJGKF258w-8FcV0ky5oKIl0Of3
"""

from google.colab import drive
drive.mount('/gdrive')

from google.colab import drive
drive.mount('/content/drive')

import os
os.environ['KAGGLE_CONFIG_DIR']="/content/drive/MyDrive/KAGGLE"

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/KAGGLE"

os.listdir("/content/drive/MyDrive/KAGGLE/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/valid")

os.listdir("/content/drive/MyDrive/KAGGLE/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/train")

import numpy as np
import pandas as pd
import pickle
import cv2
import os
from os import listdir
from sklearn.preprocessing import LabelBinarizer
from keras.models import Sequential
from tensorflow.keras.layers import BatchNormalization
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers.core import Activation, Flatten, Dropout, Dense
from keras import backend as K
from keras.preprocessing.image import ImageDataGenerator
from keras.applications.vgg19 import VGG19,preprocess_input,decode_predictions
from keras.optimizers import Adam
from keras.preprocessing import image
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt


train_datagen= ImageDataGenerator(zoom_range=0.5, shear_range=0.3, rescale=1/255,horizontal_flip= True, preprocessing_function=preprocess_input)

val_datagen=ImageDataGenerator(preprocessing_function=preprocess_input)

train=train_datagen.flow_from_directory(directory="/content/drive/MyDrive/KAGGLE/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/train",target_size=(256,256),batch_size=32)
val=val_datagen.flow_from_directory(directory="/content/drive/MyDrive/KAGGLE/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/valid",target_size=(256,256),batch_size=32)

t_img, label=train.next()

t_img, label=train.next()
t_img.shape

def plotImage(img_arr, label):
    for im, l in zip(img_arr,label):
        plt.figure(figsize=(5,5,))
        plt.imshow((im+1)/2)
        plt.show()
plotImage(t_img[:3],label[:3])

from keras.layers import Dense,Flatten
from keras.models import Model
from keras.applications.vgg19 import VGG19
import keras

base_model=VGG19(input_shape=(256,256,3),include_top=False)

for layer in base_model.layers:
    layer.trainable=True

base_model.summary()

X=Flatten()(base_model.output)

X=Dense(units=7,activation='softmax')(X)

model=Model(base_model.input,X)
model.summary()

model.compile(optimizer='adam', loss=keras.losses.categorical_crossentropy, metrics = ['accuracy'])
from keras.callbacks import ModelCheckpoint,EarlyStopping
es=EarlyStopping(monitor='val_accuracy',min_delta=0.01,patience=3,verbose=1)
mc=ModelCheckpoint(filepath='bestmodel2.h5',monitor='val_accuracy',min_delta=0.01,patience=3,verbose=1,save_best_only=True)
cb=[es,mc]
his=model.fit_generator(train,steps_per_epoch=16,epochs=50,verbose=1,callbacks=cb,validation_data=val,validation_steps=16)

h=his.history
h.keys()

plt.plot(h['accuracy'])
plt.plot(h['val_accuracy'],c= 'red')
plt.title("acc vs v-acc")
plt.show()

plt.plot(h['loss'])
plt.plot(h['val_loss'],c= 'red')
plt.title("loss vs v-loss")
plt.show()

ref=dict(zip(list(train.class_indices.keys()),list(train.class_indices.keys())))

from tensorflow.keras.utils import load_img,img_to_array
from keras.models import load_model
def prediction(path):
    img=load_img(path)
    i=img_to_array(img)
    im=preprocess_input(i)
    img=np.expand_dims(im,axis=0)
    pred=np.argmax(model.predict(img))
    print(pred)

path="/content/drive/MyDrive/KAGGLE/test/test/AppleScab1.JPG"
prediction(path)

train.class_indices